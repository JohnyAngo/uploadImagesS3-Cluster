service: s3-cluster-images

provider:
  name: aws
  runtime: nodejs14.x
  stage: "${self:provider.environment.STAGE}"
  region: "${self:provider.environment.REGION_AWS}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action: "s3:*"
          Resource: arn:aws:s3:::"${self:provider.environment.BUCKET}"/*
  environment:
    BUCKET: "${file(./serverlessEnv.js):bucketName.${self:provider.stage}.bucketName}"
    STAGE: "${opt:stage, 'dev'}"
    REGION_AWS: "${file(./serverlessEnv.js):region.${self:provider.stage}.regionAws}"

package:
  individually: true
  patterns:
    - "!*/**"

functions:
  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
        - "node_modules/**"
    events:
      - http:
          path: signedurl
          method: GET
          cors:
            origin: "*" # Aceptar todos los or√≠genes
            headers: # Lista de encabezados permitidos
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false # Establecer en `true` si las credenciales, como las cookies, deben ser soportadas
          request:
            parameters:
              querystrings:
                filename: true

  listObjects:
    handler: s3manager/handler.listObjects
    package:
      patterns:
        - "s3manager/handler.js"
        - "node_modules/**"
    events:
      - http:
          path: list
          method: POST
  deleteImage:
    handler: deleteimage/handler.deleteImageFromS3
    package:
      patterns:
        - "deleteimage/handler.js"
        - "node_modules/**"
    events:
      - http:
          path: deleteimage
          method: DELETE
          request:
            parameters:
              querystrings:
                filename: true
layers:
  base:
    name: "prd-dependencies"
    compatibleRuntimes:
      - "nodejs14.x"
    package:
      artifact: app/nodejs.zip

resources:
  Resources:
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "${self:provider.environment.BUCKET}"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"
